import fg from "fast-glob";
import { readFile, writeFile } from "fs/promises";
import { createGenerator } from "unocss";
import { createConfig } from "../unocss.config";
import { white, green, yellow, dim } from "colorette";
import { watch } from "chokidar";

const distPath = "src/styles/uno.css";
const watchPaths = "site/{snippets,templates}/**/*.php";
const mode = process.env.NODE_ENV as "development" | "production" | undefined;

async function main() {
  console.log(green("Starting UnoCSS..."));

  const config = createConfig();
  const uno = createGenerator({}, config);
  const files = await fg(watchPaths);

  const generate = async () => {
    const contents = await Promise.all(
      files.map(async (file) => await readFile(file, "utf8"))
    );

    const { css, matched } = await uno.generate(contents.join("\n"));
    await writeFile(distPath, `/* generated by unocss */\n${css}`);

    if (mode === "production") {
      console.log(
        `${green("âœ“")} Generated ${[...matched].length} UnoCSS utilities.\n`
      );
    }
  };

  if (mode !== "production") {
    const watcher = watch(files, {
      ignoreInitial: true,
      ignorePermissionErrors: true,
    });

    console.log(
      yellow("Watching for changes in ") +
        white(
          dim(Array.isArray(watchPaths) ? watchPaths.join(", ") : watchPaths)
        )
    );

    watcher.on("all", async (type, file) => {
      console.log(yellow(`${type}:`) + " " + white(dim(file)));
      await generate();
    });
  }

  await generate();
}

main().catch(() => process.exit(1));
